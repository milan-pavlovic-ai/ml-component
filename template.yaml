AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: ML Component for Car Pricing

Parameters:
  BucketParam:
    Type: String
    Description: "Name of the S3 bucket that triggers the Lambda function"

  StageParam:
    Type: String
    Default: cloud
    Description: "Environment stage name for API"


Resources:

  CarPricingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketParam


  CarPricingInferenceFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Role: !GetAtt CarPricingRole.Arn
      FunctionName: Car-Pricing-Inference-Lambda-Function
      Tracing: Active
      Timeout: 60
      MemorySize: 1024
      ImageConfig:
        Command: ["src.app.api.handler"]
      Events:
        CarPricingInferenceApiRoot:
          Type: Api
          Properties: 
            RestApiId: !Ref CarPricingAPIGateway
            Path: /
            Method: POST
        CarPricingInferenceApi:
          Type: Api
          Properties:
            RestApiId: !Ref CarPricingAPIGateway
            Path: /{proxy+}
            Method: POST
    Metadata:
      DockerTag: python3.9-v1
      DockerContext: ./
      Dockerfile: Dockerfile
  
  CarPricingTrainingFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Role: !GetAtt CarPricingRole.Arn
      FunctionName: Car-Pricing-Training-Lambda-Function
      Tracing: Active
      Timeout: 600
      MemorySize: 2048
      ImageConfig:
        Command: ["src.app.trainer.lambda_handler"]
      Events:
        TrainingS3Trigger:
          Type: S3
          Properties:
            Bucket: !Ref CarPricingBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: data/processed/
    Metadata:
      DockerTag: python3.9-v1
      DockerContext: ./
      Dockerfile: Dockerfile

  CarPricingProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Role: !GetAtt CarPricingRole.Arn
      FunctionName: Car-Pricing-DataProcessor-Lambda-Function
      Tracing: Active
      Timeout: 60
      MemorySize: 1024
      ImageConfig:
        Command: ["src.app.processor.lambda_handler"]
      Events:
        ProcessorS3Trigger:
          Type: S3
          Properties:
            Bucket: !Ref CarPricingBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: data/raw/
    Metadata:
      DockerTag: python3.9-v1
      DockerContext: ./
      Dockerfile: Dockerfile


  CarPricingAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageParam
      OpenApiVersion: '3.0.0'
      TracingEnabled: true
      Auth:
        ApiKeyRequired: true

  CarPricingApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    Properties:
      Enabled: true
      StageKeys:
        - RestApiId: !Ref CarPricingAPIGateway
          StageName: !Ref StageParam

  CarPricingApiUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      UsagePlanName: CarPricingUsagePlan
      ApiStages:
        - ApiId: !Ref CarPricingAPIGateway
          Stage: !Ref StageParam

  CarPricingUsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref CarPricingApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref CarPricingApiUsagePlan


  CarPricingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Car-Pricing-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
                - lambda.amazonaws.com
                - s3.amazonaws.com
                - logs.amazonaws.com
                - events.amazonaws.com
                - cloudwatch.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
